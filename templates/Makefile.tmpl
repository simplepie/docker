@@HEADER@@

#-------------------------------------------------------------------------------
# Global variables.

@@DOCKER_VARS@@

#-------------------------------------------------------------------------------
# Running `make` will show the list of subcommands that will run.

@@MAKE_ALL@@

#-------------------------------------------------------------------------------
# Base Docker images so that we have some repeatability

.PHONY: base-72
base-72:
	$(BUILD_DOCKER) --tag simplepieng/base:$(PHP_LAST) --file build/base/Dockerfile-$(PHP_LAST) .

.PHONY: base-73
base-73:
	$(BUILD_DOCKER) --tag simplepieng/base:$(PHP_CURR) --file build/base/Dockerfile-$(PHP_CURR) .

.PHONY: base-all
base-all: base-72 base-73

#-------------------------------------------------------------------------------
# Build all development focused containers.

.PHONY: build-all
build-all:
	$(BUILD_COMPOSE)

.PHONY: build-72
build-72:
	$(BUILD_COMPOSE) $(COMPOSE_72)

.PHONY: build-73
build-73:
	$(BUILD_COMPOSE) $(COMPOSE_73)

.PHONY: build-test
build-test:
	$(BUILD_COMPOSE) tests-72 tests-73

.PHONY: build-coverage
build-coverage:
	$(BUILD_COMPOSE) coverage-72 coverage-73

#-------------------------------------------------------------------------------
# Clean Docker containers

.PHONY: dockerfile
dockerfile:
	find $$(pwd)/build -type f -name Dockerfile-$(PHP_LAST)* -not -path "*build/base*" | xargs -P $$(nproc) -I% bash -c 'sed -i -r "s/^FROM simplepieng\/base:([^\n]+)/FROM simplepieng\/base:$(PHP_LAST)/" %'
	find $$(pwd)/build -type f -name Dockerfile-$(PHP_LAST)* -not -path "*build/base*" | xargs -P $$(nproc) -I% bash -c 'cp -fv % $$(echo % | sed -r "s/$(PHP_LAST)/$(PHP_CURR)/g")'
	find $$(pwd)/build -type f -name Dockerfile-$(PHP_CURR)* -not -path "*build/base*" | xargs -P $$(nproc) -I% bash -c 'sed -i -r "s/^FROM simplepieng\/base:$(PHP_LAST)/FROM simplepieng\/base:$(PHP_CURR)/" %'

.PHONY: push-images
push-images:
	docker push simplepieng/base:$(PHP_LAST)
	docker push simplepieng/base:$(PHP_CURR)

	docker push simplepieng/test-runner:$(PHP_LAST)
	docker push simplepieng/test-runner:$(PHP_CURR)

	docker push simplepieng/test-coverage:$(PHP_LAST)
	docker push simplepieng/test-coverage:$(PHP_CURR)

.PHONY: clean-72
clean-72:
	docker image rm --force $(IMAGES_72)

.PHONY: clean-73
clean-73:
	docker image rm --force $(IMAGES_73)

.PHONY: clean-all
clean-all: clean-72 clean-73

.PHONY: rmint
rmint:
	# Remove the intermediate Docker containers. All Docker image builds will start over from scratch.
	docker images | grep "<none>" | awk '{print $$3}' | xargs -P 2 -I% docker rmi -f %

#-------------------------------------------------------------------------------
# Running tests

.PHONY: test
test:
	bin/phpunit --testsuite all

.PHONY: test-quick
test-quick:
	docker-compose up $(TEST_QUICK)

.PHONY: test-coverage
test-coverage:
	docker-compose up $(TEST_COVER)

#-------------------------------------------------------------------------------
# Extra Resources

.PHONY: entities
entities:
	wget -O resources/entities.json https://www.w3.org/TR/html5/entities.json
	tools/entities.php
	cat resources/entities.dtd | uniq > resources/entities2.dtd
	mv resources/entities2.dtd resources/entities.dtd

#-------------------------------------------------------------------------------
# PHP build process stuff

@@PHP_BUILD_PROCESS@@

#-------------------------------------------------------------------------------
# Documentation tasks

@@PROJECT_DOCS@@

#-------------------------------------------------------------------------------
# Linting and Static Analysis

@@LINTING_STATIC_ANALYSIS@@

#-------------------------------------------------------------------------------
# Git Tasks

@@RELEASE_TASKS@@
